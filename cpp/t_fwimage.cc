#include <cassert>
#include <iostream>
#include "fwimage.h"
#include "test.h"
using namespace nmrpflash;
using namespace std;

#define MY_TEST_RUN(f) \
	do { \
		try { \
			cerr << #f << ": " << flush; \
			f(); \
			cerr << "ok" << endl; \
		} catch (const exception& e) { \
			cerr << "error" << endl; \
			cerr << e.what() << endl; \
		} \
	} while (0)

namespace {

const auto before_patch =
	"aaaaaaaa"
	"bbbbbbbb"
	"cccccccc"
	"dddddddd";

const auto after_patch =
	"AAAAAAaB"
	"BBBBBBBB"
	"ccCCCCcc"
	"ddddDDDD";

void test_patch()
{
	auto img = fwimage::parse(before_patch);
	img->patch(0, buffer(6, 'A'));
	img->patch(7, buffer(9, 'B'));
	img->patch(-4, buffer(4, 'D'));
	img->patch(-14, buffer(4, 'C'));

	for (size_t i = 1; i <= img->size(); ++i) {
		buffer buf = img->read();
		MY_ASSERT_EQ(buf.size(), img->size());
		MY_ASSERT_EQ_Q(buf, after_patch);
	}
}

const auto dni_v3_2_1_0 = to_buffer<uint8_t>({
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x54, 0x45, 0x53, 0x54, 0x0a,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x56, 0x33, 0x2e, 0x32,
	0x2e, 0x31, 0x2e, 0x30, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a,
	0x31, 0x0a, 0x68, 0x64, 0x5f, 0x69, 0x64, 0x3a, 0x74, 0x65, 0x73, 0x74,
	0x2b, 0x74, 0x65, 0x73, 0x74, 0x2b, 0x74, 0x65, 0x73, 0x74, 0x2b, 0x74,
	0x65, 0x73, 0x74, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xa5
});

const auto dni_v3_2_1_99 = to_buffer<uint8_t>({
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x54, 0x45, 0x53, 0x54, 0x0a,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x56, 0x33, 0x2e, 0x32,
	0x2e, 0x31, 0x2e, 0x39, 0x39, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x3a, 0x31, 0x0a, 0x68, 0x64, 0x5f, 0x69, 0x64, 0x3a, 0x74, 0x65, 0x73,
	0x74, 0x2b, 0x74, 0x65, 0x73, 0x74, 0x2b, 0x74, 0x65, 0x73, 0x74, 0x2b,
	0x74, 0x65, 0x73, 0x74, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x63
});

void test_dni()
{
	auto img = fwimage::parse(dni_v3_2_1_0);
	MY_ASSERT_EQ(img->type(), "dni");
	MY_ASSERT_EQ(img->version(), "3.2.1.0");

	auto buf = img->read();
	MY_ASSERT_EQ_Q(buf, dni_v3_2_1_0);

	img->version("3.2.1.99");
	MY_ASSERT_EQ(img->version(), "3.2.1.99");

	img = fwimage::parse(img->read());
	MY_ASSERT_EQ(img->version(), "3.2.1.99");

	buf = img->read();
	MY_ASSERT_EQ_Q(buf, dni_v3_2_1_99);

	img->version("3.2.1.0");
	buf = img->read();
	MY_ASSERT_EQ_Q(buf, dni_v3_2_1_0);

	img = fwimage::parse(buf);
	MY_ASSERT_EQ(img->version(), "3.2.1.0");
}

void test_chk_or_rax(const string& type, const buffer& b1, const buffer& b2)
{
	auto img = fwimage::parse(b1);
	MY_ASSERT_EQ_Q(img->type(), type);
	MY_ASSERT_EQ(img->version(), "1.2.3.44_5.6.77");

	auto buf = img->read();
	MY_ASSERT_EQ_Q(buf, b1);

	img->version("1.2.3.255_5.6.77");
	MY_ASSERT_EQ(img->version(), "1.2.3.255_5.6.77");

	img = fwimage::parse(img->read());
	MY_ASSERT_EQ(img->version(), "1.2.3.255_5.6.77");

	buf = img->read();
	MY_ASSERT_EQ_Q(buf, b2);

	img->version("1.2.3.44_5.6.77");
	buf = img->read();
	MY_ASSERT_EQ_Q(buf, b1);

	img = fwimage::parse(buf);
	MY_ASSERT_EQ(img->version(), "1.2.3.44_5.6.77");
}

const auto chk_1_2_3_44_5_6_77 = to_buffer<uint8_t>({
	0x2a, 0x23, 0x24, 0x5e, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x01, 0x02, 0x03,
	0x2c, 0x05, 0x06, 0x4d, 0x17, 0xe8, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x17, 0xe8, 0x3f, 0xc0,
	0x88, 0x9e, 0x07, 0x02, 0x54, 0x45, 0x53, 0x54, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
});

const auto chk_1_2_3_255_5_6_77 = to_buffer<uint8_t>({
	0x2a, 0x23, 0x24, 0x5e, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x01, 0x02, 0x03,
	0xff, 0x05, 0x06, 0x4d, 0x17, 0xe8, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x17, 0xe8, 0x3f, 0xc0,
	0xa2, 0xfe, 0x07, 0xd5, 0x54, 0x45, 0x53, 0x54, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
});


void test_chk()
{
	test_chk_or_rax("chk", chk_1_2_3_44_5_6_77, chk_1_2_3_255_5_6_77);
}

const auto rax_1_2_3_44_5_6_77 = to_buffer<uint8_t>({
	0x00, 0x01, 0x00, 0x20, 0xd5, 0xd2, 0xe8, 0x4b, 0x1d, 0xb8, 0x00, 0xcc,
	0x28, 0xa8, 0xf3, 0x00, 0x8a, 0x81, 0x51, 0x57, 0x52, 0xad, 0x63, 0x04,
	0xe0, 0xcc, 0xa5, 0xdd, 0x4b, 0x92, 0xa3, 0x4c, 0x61, 0x79, 0xb9, 0xb3,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x56, 0x31, 0x2e, 0x32,
	0x2e, 0x33, 0x2e, 0x34, 0x34, 0x5f, 0x35, 0x2e, 0x36, 0x2e, 0x37, 0x37,
	0x00, 0x03, 0x00, 0x05, 0x56, 0x30, 0x2e, 0x30, 0x30, 0x00, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff
});

const auto rax_1_2_3_255_5_6_77 = to_buffer<uint8_t>({
	0x00, 0x01, 0x00, 0x20, 0x1f, 0x54, 0xb4, 0x31, 0xae, 0xb4, 0xb2, 0x16,
	0x6b, 0xca, 0x56, 0xad, 0x16, 0x16, 0xf7, 0xa9, 0x47, 0x47, 0x58, 0xec,
	0xaa, 0xd2, 0x4f, 0x97, 0x37, 0x50, 0xcf, 0x67, 0x17, 0x20, 0xf3, 0xfd,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x11, 0x56, 0x31, 0x2e, 0x32,
	0x2e, 0x33, 0x2e, 0x32, 0x35, 0x35, 0x5f, 0x35, 0x2e, 0x36, 0x2e, 0x37,
	0x37, 0x00, 0x03, 0x00, 0x05, 0x56, 0x30, 0x2e, 0x30, 0x30, 0x00, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff
});

void test_rax()
{
	test_chk_or_rax("rax", rax_1_2_3_44_5_6_77, rax_1_2_3_255_5_6_77);
}
}

int main(int argc, char* argv[])
{
	if (argc >= 2) {
		auto img = fwimage::open(argv[1]);

		cerr << "size   : " << img->size() << endl;

		if (img->type().empty()) {
			cerr << "type   : (generic)" << endl;
		} else {
			cerr << "type   : " << img->type() << endl;
			cerr << "version: " << img->version() << endl;

			if (argc >= 3) {
				img->version(argv[2]);
			}
		}
	} else {
		MY_TEST_RUN(test_dni);
		MY_TEST_RUN(test_chk);
		MY_TEST_RUN(test_rax);
		MY_TEST_RUN(test_patch);
		return 0;
	}
}
