#include <cassert>
#include <iostream>
#include "fwimage.h"
using namespace nmrpflash;
using namespace std;

namespace {

const auto before_patch =
	"aaaaaaaa"
	"bbbbbbbb"
	"cccccccc"
	"dddddddd";

const auto after_patch =
	"AAAAAAaB"
	"BBBBBBBB"
	"ccCCCCcc"
	"ddddDDDD";

void test_patch()
{
	auto img = fwimage::parse(before_patch);

	img->patch(0, buffer(6, 'A'));
	img->patch(7, buffer(9, 'B'));
	img->patch(-4, buffer(4, 'D'));
	img->patch(-14, buffer(4, 'C'));

	for (size_t i = 1; i <= img->size(); ++i) {
		buffer buf;
		img->read_all(i, [&buf](const auto& b) {
				buf += b;
		});

		assert(buf.size() == img->size());

		if (buf != after_patch) {
			throw runtime_error("buf != after_patch; i == " + to_string(i) + ", buf=" + buf);
		}
	}
}

const uint8_t dni_v3_2_1_0[] = {
  0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x54, 0x45, 0x53, 0x54, 0x0a,
  0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x33, 0x2e, 0x32, 0x2e,
  0x31, 0x2e, 0x30, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x0a,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xe9
};

const uint8_t dni_v3_2_1_99[] = {
  0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x54, 0x45, 0x53, 0x54, 0x0a,
  0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x33, 0x2e, 0x32, 0x2e,
  0x31, 0x2e, 0x39, 0x39, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a,
  0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xa7
};

void test_dni()
{
	auto dni = fwimage::parse(to_buffer(dni_v3_2_1_0));
	assert(dni->type() == "dni");
	assert(dni->version() == "3.2.1.0");

	auto buf = dni->read(0, dni->size());
	assert(buf == to_buffer(dni_v3_2_1_0));

	dni->version("3.2.1.99");
	assert(dni->version() == "3.2.1.99");

	buf = dni->read(0, dni->size());
	assert(buf == to_buffer(dni_v3_2_1_99));
}

const uint8_t chk_1_2_3_44_5_6_77[] = {
  0x2a, 0x23, 0x24, 0x5e, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x01, 0x02, 0x03,
  0x2c, 0x05, 0x06, 0x4d, 0x17, 0xe8, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x17, 0xe8, 0x3f, 0xc0,
  0x88, 0x9e, 0x07, 0x02, 0x54, 0x45, 0x53, 0x54, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const uint8_t chk_1_2_3_255_5_6_77[] = {
  0x2a, 0x23, 0x24, 0x5e, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x01, 0x02, 0x03,
  0xff, 0x05, 0x06, 0x4d, 0x17, 0xe8, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x17, 0xe8, 0x3f, 0xc0,
  0xa2, 0xfe, 0x07, 0xd5, 0x54, 0x45, 0x53, 0x54, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void test_chk()
{
	auto dni = fwimage::parse(to_buffer(chk_1_2_3_44_5_6_77));
	assert(dni->type() == "chk");
	assert(dni->version() == "1.2.3.44_5.6.77");

	auto buf = dni->read(0, dni->size());
	assert(buf == to_buffer(chk_1_2_3_44_5_6_77));

	dni->version("1.2.3.255_5.6.77");
	assert(dni->version() == "1.2.3.255_5.6.77");

	buf = dni->read(0, dni->size());
	if (buf != to_buffer(chk_1_2_3_255_5_6_77)) {
		cout.write(buf.data(), buf.size());
	}

	//assert(buf == to_buffer(chk_1_2_3_255_5_6_77));
}
}

int main(int argc, char* argv[])
{
	if (argc >= 2) {
		auto img = fwimage::open(argv[1]);

		cerr << "size   : " << img->size() << endl;

		if (img->type().empty()) {
			cerr << "type   : (generic)" << endl;
		} else {
			cerr << "type   : " << img->type() << endl;
			cerr << "version: " << img->version() << endl;
			if (img->type() == "dni") {
				img->version("1.2.3.4");
			} else if (img->type() == "chk") {
				img->version("1.5.0.99_1.5.0");
			}
			cerr << "version: " << img->version() << endl;
		}

		img->read_all(512*1024, [] (const buffer& b) {
				cout.write(b.data(), b.size());
		});
	} else {
		test_dni();
		test_chk();
		test_patch();
	}
}
